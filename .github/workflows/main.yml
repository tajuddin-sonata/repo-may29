name: Build and Deployment

on:
  push:
    branches:
      - feature/taj

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build artifacts
        run: |
          mkdir deployment
          cp ./app.py deployment/app.py

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifacts
          path: deployment

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine last release version
        id: last_release
        run: |
          response=$(curl --request GET --url https://api.github.com/repos/${{ github.repository }}/releases/latest)
          last_version=$(echo "$response" | jq -r '.tag_name')
          if [[ -z "$last_version" || "$last_version" == "null" ]]; then
            last_version="v1.0.0"
          fi
          echo "::set-output name=last_version::$last_version"

      - name: Determine new version
        id: new_version
        run: |
          last_version=${{ steps.last_release.outputs.last_version }}
          base_version=${last_version#"v"}  # Remove the 'v' prefix if present
          IFS='.' read -ra version_parts <<< "$base_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          new_patch=$((patch+1))
          new_version="v${major}.${minor}.${new_patch}"
          echo "::set-output name=new_version::$new_version"
          echo "::set-output name=tag_name::${new_version}"

      - name: Create or Update release
        id: create_or_update_release
        run: |
          new_version=${{ needs.release.outputs.new_version }}
          tag_name="v${new_version}"
          release_name="Release ${new_version}"
          response=$(curl --request GET --url "https://api.github.com/repos/${{ github.repository }}/releases/tags/${tag_name}" --header "Authorization: Bearer ${{ secrets.PAT_TOKEN }}")
          if [[ "$response" == *"Not Found"* ]]; then
            # Create new release
            response=$(curl --request POST --url "https://api.github.com/repos/${{ github.repository }}/releases" --header "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" --header "Content-Type: application/json" --data "{\"tag_name\":\"${tag_name}\",\"name\":\"${release_name}\",\"draft\":false,\"prerelease\":false}")
          else
            # Update existing release
            release_id=$(echo "$response" | jq -r '.id')
            response=$(curl --request PATCH --url "https://api.github.com/repos/${{ github.repository }}/releases/${release_id}" --header "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" --header "Content-Type: application/json" --data "{\"tag_name\":\"${tag_name}\",\"name\":\"${release_name}\",\"draft\":false,\"prerelease\":false}")
          fi
          echo "::set-output name=release_id::$(echo "$response" | jq -r '.id')"

      - name: Download release asset
        id: download_asset
        if: steps.create_or_update_release.outputs.release_id != null
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const { data: releases } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1,
            });
            const release = releases[0];
            const { data: assets } = await github.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
            });
            const asset = assets.find(a => a.name === 'app.py');
            if (asset) {
              const response = await github.repos.downloadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id,
                headers: {
                  Accept: 'application/octet-stream',
                },
              });
              const fs = require('fs');
              const path = require('path');
              const deploymentPath = path.join(process.env.GITHUB_WORKSPACE, 'deployment');
              fs.mkdirSync(deploymentPath, { recursive: true });
              fs.writeFileSync(path.join(deploymentPath, 'app.py'), response.data);
            }

  deploy:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Deploy
        run: |
          # python app.py
